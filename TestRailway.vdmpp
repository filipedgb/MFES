class TestRailway is subclass of MyTestCase
/*
  Class for testing the railway system.
  FEUP, MFES, 2015/16.
*/
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public testCreateBlock : () ==> ()
  testCreateBlock() == (
    
  	dcl p: Block := new Block(<YELLOW>,<YELLOW>);
  	assertEqual(<YELLOW>, p.getSemaphore1());
  	assertEqual(<YELLOW>, p.getSemaphore2());
  );
	
	public testCreateTrack : () ==> ()
	testCreateTrack() == (
    
    dcl p1: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p2: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p3: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p4: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p5: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p6: Block := new Block(<YELLOW>,<YELLOW>);
  
  	dcl track: Track := new Track();
  	
  	track.addBlockToTrack(p1);
  	track.addBlockToTrack(p2);
  	track.addBlockToTrack(p3);
  	track.addBlockToTrack(p4);
  	track.addBlockToTrack(p6);
  	
  	assertEqual(5,len track.getTrack());
  	
  	track.addBlockToTrack(p5);
  	
  	assertEqual(6,len track.getTrack());
  	
  	assertEqual(p5, track.getTrack()(len track.getTrack()));
  	
  	assertEqual(6, p5.getIndexInTrack());   	
 );
 
 public testMoveTrain : () ==> () 
 testMoveTrain() == (
 		dcl p1: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p2: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p3: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p4: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p5: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p6: Block := new Block(<YELLOW>,<YELLOW>);
    
    dcl track: Track := new Track();
    
    dcl trainForward: Train := new Train(true,true);
    dcl trainBackward: Train := new Train(true,false);
    
    track.addBlockToTrack(p1);
    track.addBlockToTrack(p2);
    track.addBlockToTrack(p3);
    track.addBlockToTrack(p4);
    track.addBlockToTrack(p5);
    track.addBlockToTrack(p6);
    
    assertEqual(6, len track.getTrack());
    
    trainForward.setCurrentBlock(p4);
    trainBackward.setCurrentBlock(p3);
    
    assertEqual(p4, trainForward.getCurrentBlock());
    assertEqual(p3, trainBackward.getCurrentBlock());
    assertTrue(p4.getHasTrain());
    assertTrue(p3.getHasTrain());
    
    track.moveTrain(trainForward); -- p4 -> p5
    track.moveTrain(trainBackward); -- p3 -> p2
    
    assertEqual(p5, trainForward.getCurrentBlock());
    assertEqual(p2, trainBackward.getCurrentBlock());
    assertTrue(not p4.getHasTrain());
    assertTrue(not p3.getHasTrain());
    assertTrue(p5.getHasTrain());
    assertTrue(p2.getHasTrain());
    
    track.moveTrain(trainForward); -- p5 -> p6
    track.moveTrain(trainForward); -- p6 -> p1
    
    assertEqual(p1, trainForward.getCurrentBlock());
    
    assertTrue(p1.getHasTrain());
    
    trainForward.setDirection(false); -- move backwards now
    
    track.moveTrain(trainForward); -- p1 -> p6
    
    assertEqual(p6, trainForward.getCurrentBlock());
    assertTrue(p6.getHasTrain());
    assertTrue(not p1.getHasTrain());
 ); 
 
 public testMoveTrainWithStations : () ==> () 
 testMoveTrainWithStations() == (
 		dcl p1: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p2: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p3: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p4: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p5: Block := new Block(<YELLOW>,<YELLOW>);
    dcl p6: Block := new Block(<YELLOW>,<YELLOW>);
    
    dcl track: Track := new Track();
    
    dcl trainForward: Train := new Train(true,true);
    dcl trainBackward: Train := new Train(true,false);
    
    p3.setStation(true);
    p4.setStation(true);
    
    track.addBlockToTrack(p1);
    track.addBlockToTrack(p2);
    track.addBlockToTrack(p3);
    track.addBlockToTrack(p4);
    track.addBlockToTrack(p5);
    track.addBlockToTrack(p6);
    
    assertEqual(6, len track.getTrack());
    
    trainForward.setCurrentBlock(p2);
    trainBackward.setCurrentBlock(p5);
    
    track.moveTrain(trainForward); -- p2 -> p3
    track.moveTrain(trainBackward); -- p5 -> p4
       
    assertEqual(p3, trainForward.getCurrentBlock());    
    assertEqual(p4, trainBackward.getCurrentBlock());
        
    track.moveTrain(trainForward); -- p3 -> p5
    track.moveTrain(trainBackward); -- p4 -> p2

    assertEqual(p5, trainForward.getCurrentBlock());    
    assertEqual(p2, trainBackward.getCurrentBlock());
            
    track.moveTrain(trainForward); -- p5 -> p6
    track.moveTrain(trainBackward); -- p2 -> p1
    
    assertEqual(p6, trainForward.getCurrentBlock());    
    assertEqual(p1, trainBackward.getCurrentBlock());
    
    
        
 ); 
  
 public testStation : () ==> ()
 testStation() == (
 		dcl p1: Block := new Block(<GREEN>,<GREEN>);
    dcl p2: Block := new Block(<GREEN>,<GREEN>);
 
 		p1.setStation(true);
    assertTrue(p1.isStation());    
    assertTrue(not p2.isStation());    
 
 );
 
 
 public testTrainWaiting : () ==> () 
 testTrainWaiting() == (
 		dcl p1: Block := new Block(<GREEN>,<GREEN>);
    dcl p2: Block := new Block(<GREEN>,<GREEN>);
    dcl p3: Block := new Block(<GREEN>,<GREEN>);
    dcl p4: Block := new Block(<GREEN>,<GREEN>);
    dcl p5: Block := new Block(<GREEN>,<GREEN>);
    dcl p6: Block := new Block(<GREEN>,<GREEN>);
    dcl p7: Block := new Block(<GREEN>,<GREEN>);
    dcl p8: Block := new Block(<GREEN>,<GREEN>);
    dcl p9: Block := new Block(<GREEN>,<GREEN>);
    
    dcl dummy: bool := false;
    
    dcl track: Track := new Track();
    
    dcl trainForward: Train := new Train(true,true);
    dcl trainBackward: Train := new Train(true,false);
    
    p3.setStation(true);
    p4.setStation(true);
    p8.setStation(true);
    p9.setStation(true);
    
    
    track.addBlockToTrack(p1);
    track.addBlockToTrack(p2);
    track.addBlockToTrack(p3);
    track.addBlockToTrack(p4);
    track.addBlockToTrack(p5);
    track.addBlockToTrack(p6);
    track.addBlockToTrack(p7);
    track.addBlockToTrack(p8);
    track.addBlockToTrack(p9);
    
    trainForward.setCurrentBlock(p2);
    trainBackward.setCurrentBlock(p9);
    
    track.moveTrain(trainForward); -- p2 -> p3
    track.moveTrain(trainBackward); -- p9 -> p7
              
    assertEqual(p7, trainBackward.getCurrentBlock());    
   
   
    assertEqual(<GREEN>, track.getTrack()(1).getSemaphore1());
    assertEqual(<GREEN>, track.getTrack()(2).getSemaphore1());
    assertEqual(<GREEN>, track.getTrack()(3).getSemaphore1());
    assertEqual(<GREEN>, track.getTrack()(4).getSemaphore1());          
    assertEqual(<RED>, track.getTrack()(5).getSemaphore1());
    assertEqual(<RED>, track.getTrack()(6).getSemaphore1());           
    assertEqual(<RED>, track.getTrack()(7).getSemaphore1());    
    
        
    track.moveTrain(trainForward); -- p3 -> p3
    assertEqual(false,dummy);
    track.moveTrain(trainBackward); -- p7 -> p6
    
    track.moveTrain(trainForward); -- p3 -> p3
    assertEqual(false,dummy);
    track.moveTrain(trainBackward); -- p6 -> p5
        
    track.moveTrain(trainForward); -- p3 -> p3
    assertEqual(false,dummy);
    track.moveTrain(trainBackward); -- p5 -> p4
        
      
    assertEqual(p3, trainForward.getCurrentBlock());    
    assertEqual(p4, trainBackward.getCurrentBlock());   
        
  
        
 ); 
  
  
  
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TestRailway