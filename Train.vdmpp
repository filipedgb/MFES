class Train
/*
  Defines a train.
  FEUP, MFES, 2015/16.
*/
types

values
-- TODO Define values here
instance variables
	private static lastTrainId: nat := 0;
	private trainId: nat;
	private moving: bool;
	private direction: bool; -- true: forward, false: backward
	private currentBlock: [Block] := nil;

	inv currentBlockHasTrain();
operations

	/**
	 * Train constructor.
	 *
	 * @param movingIn - the state of the train (moving or stopped)
	 * @param directionIn - the direction of the train (forward or backward)
	 * 
	 * @return Train with auto-incremental id and the moving state set to the param value
	 */
	public Train : bool * bool ==> Train
	Train(movingIn,directionIn) == (
		moving := movingIn;
		direction := directionIn;
		trainId := lastTrainId;
		lastTrainId := lastTrainId + 1;
		return self
	);
	
	/**
	 * Getter for the Train ID.
	 *
	 * @return train id
	 */
	pure public getId : () ==> nat
	getId() == return self.trainId;
	
	/**
	 * Getter for the Train direction.
	 *
	 * @return train direction
	 */
	pure public getDirection : () ==> bool
	getDirection() == return self.direction;
	
		/**
	 * Setter for the Train direction.
	 *
	 * @param train direction
	 */
	public setDirection : bool ==> ()
	setDirection(d) == direction := d;
	
	
	/**
	 * Getter for the moving state of the train.
	 *
	 * @return the moving state of the train
	 */
	pure public isMoving : () ==> bool
	isMoving() == return self.moving;
	
	pure public getCurrentBlock : () ==> Block
	getCurrentBlock() == return self.currentBlock;
	
 	/**
	 * Sets current block of a train (where the train is) 
	 * Sets the block's semaphores to RED
   * @param the current block
	 */
	public setCurrentBlock : Block ==> ()
	setCurrentBlock(b) == (
		b.setHasTrain(true);
		currentBlock := b;
		b.setSemaphore1(<RED>);
		b.setSemaphore2(<RED>)
	)
	pre if(direction) then b.getSemaphore1() <> <RED>
	else b.getSemaphore2() <> <RED> and
	b.getHasTrain() = false
	post currentBlock = b and currentBlock.getHasTrain() = true;

pure private currentBlockHasTrain : () ==> bool
currentBlockHasTrain() == (
	return (self.currentBlock = nil or self.currentBlock.getHasTrain())
);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Train