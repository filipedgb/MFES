
-- ++ inv -> index on track
-- inv -> hastrain and currentBlock
-- ++ ter set of trains na track, inv -> n pode haver 2 comboios no mm block
-- ++ pre -> setCurrentblock, check has train
class Track
/*
  Defines a sequence of blocks.
  FEUP, MFES, 2015/16.
*/
types
	
values
-- TODO Define values here
instance variables
	-- track is circular	
	private track: [seq of Block] := [];
	private trains: [seq of Train] := [];
	
	inv not twoTrainsInSameBlock(trains);
	inv not hasDuplicatesIndexInTrack(track);
	inv not hasDuplicates[Train](trains);
	inv not hasDuplicates[Block](track);
	inv currentBlockOnTrains(trains); 
	inv len trains <= len track;
	
operations
	/**
	 * Track constructor without blocks
	 *
	 * @param blocks 
	 * @return Train with auto-incremental id and the moving state set to the param value
	 */
	public Track : () ==> Track
	Track() == (
		return self
	);
	
	/**
	* Getter for the track
	* @return track
	*/
	pure public getTrack : () ==> seq of Block
	getTrack() == (
		return self.track
	);
	
	/**
	* Adds block to the track
	* @param block block to add
	*/
	public addBlockToTrack : Block ==> ()
	addBlockToTrack(block) == (
		block.setIndexInTrack(len track + 1);
		track := track ^ [block]
	);
	
	/**
	* Getter for the trains
	* @return trains
	*/
	pure public getTrains : () ==> seq of Train
	getTrains() == (
		return self.trains
	);
	
	/**
	* Adds train to the trains
	* @param t train to add
	*/
	public addTrainToTrains : Train ==> ()
	addTrainToTrains(t) == (
		trains := trains ^ [t];
	);
	
	public changeSemaphoresToRed : Train ==> ()
	changeSemaphoresToRed(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl initialIndex: nat1 := b.getIndexInTrack();
		dcl direction: bool := t.getDirection();
		dcl index: nat1 := initialIndex;
		
		if t.getDirection() then ( -- clockwise
			while track(index).isStation() = false do (
				track(index).setSemaphore2(<RED>);
			
				IO`print("CCW Semaphore of track (");
	  		IO`print(index); 
	  		IO`println(") set to RED ");
					
				index := getNextBlockIndex(index,direction);
			)
		) 
		else ( -- counterclockwise
			while	track(index).isStation() = false do (
				track(index).setSemaphore1(<RED>);
				
				IO`print("CW Semaphore of track (");
	  		IO`print(index); 
	  		IO`println(") set to RED ");
				
				index := getNextBlockIndex(index,direction);
			)
		)
	);
		
	public changeSemaphoresToGreen: Train ==> ()
	changeSemaphoresToGreen(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl initialIndex: nat1 := b.getIndexInTrack();
		dcl direction: bool := t.getDirection();
		dcl index: nat1 := getNextBlockIndex(initialIndex,direction);
				
		if t.getDirection() then ( -- clockwise
			while	track(index).isStation() = false do (
				track(index).setSemaphore1(<GREEN>);
				
				IO`print("CW Semaphore of track (");
	  		IO`print(index); 
	  		IO`println(") set to GREEN ");
				
				index := getNextBlockIndex(index,direction);
			)
		) 
		else ( -- counterclockwise
			while track(index).isStation() = false do (
				track(index).setSemaphore2(<GREEN>);
				
				IO`print("CW Semaphore of track (");
	  		IO`print(index); 
	  		IO`println(") set to GREEN ");
					
				index := getNextBlockIndex(index,direction);
			)
		)
	);
	
	public askToLeaveStation: Train ==> bool
	askToLeaveStation(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl initialIndex: nat1 := b.getIndexInTrack();
		dcl direction: bool := t.getDirection();
		dcl index: nat1 := getNextBlockIndex(initialIndex,direction);
	
		IO`println("Can I leave station?");
			
		if t.getDirection() then ( -- clockwise
			while track(index).isStation() = false  do (
				if(track(index).getHasTrain()) then (
					IO`print("No, there is a train in track (");
		  		IO`print(index); 
		  		IO`println(")");

					return false;
				);
				index := getNextBlockIndex(index,direction);
			);
		
			IO`println("Yes, track is not busy");
			changeSemaphoresToGreen(t);
			moveTrain(t);			
		) 
		else ( -- counterclockwise
			while	track(index).isStation() = false do (
				if(track(index).getHasTrain()) then (
					IO`print("No, there is a train in track (");
		  		IO`print(index); 
		  		IO`println(")");
		  		
					return false;
				);
				index := getNextBlockIndex(index,direction);
			);
			
			IO`println("Yes, track is not busy");
			changeSemaphoresToGreen(t);
			moveTrain(t);
		)
	)
	pre t.getCurrentBlock().isStation();	
		
	/**
	* Moves train on block according to the direction and position of the train
	* @param t train
	*/
	-- falta ver os semaforos [n sei se vai ser para ver aqui]
	public moveTrain : Train ==> bool
	moveTrain(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl nb: Block := getNextBlock(t);
		dcl pb: Block := getPreviousBlock(t);
	
		if(t.getDirection()) then ( -- semaphores 1
			if(nb.getSemaphore1() = <RED>) then (
				if b.isStation() then (
					askToLeaveStation(t)
				) else return false;
			)
			else (			
				t.setCurrentBlock(nb);
				b.setHasTrain(false);
				
				b.setSemaphore1(<YELLOW>);
				pb.setSemaphore1(<GREEN>);
				
				if(b.isStation()) then (
					changeSemaphoresToRed(t);
				);
				
				return true
			)
		)
		else ( --semaphores 2
			if(nb.getSemaphore2() = <RED>) then (
				if b.isStation() then (
					askToLeaveStation(t)
				) else return false;
			)
			else (			
				t.setCurrentBlock(nb);
				b.setHasTrain(false);
				
				b.setSemaphore2(<YELLOW>);
				pb.setSemaphore2(<GREEN>);
				
				if(b.isStation()) then (
					changeSemaphoresToRed(t);
				);	
				return true
			)
		)
	);
	
	/**
	* Get next block 
	* @param t train
	*/
	
	pure public getNextBlock : Train ==> Block 
	getNextBlock(t) == (
			dcl b : Block := t.getCurrentBlock();
	
			if(t.getDirection()) then (
				if(b.isStation() and  b.getIndexInTrack() >= (len track-1)) then (
					return track(1);
				)
				else if(b.getIndexInTrack() >= len track ) then (
					return track(1);
				)
				else if(t.getCurrentBlock().isStation()) then ( -- is station
					return track(b.getIndexInTrack()+2);
				)
				else ( 
					return track(b.getIndexInTrack()+1);	
				)
			)
			else (
				if(b.isStation() and  b.getIndexInTrack() = 2) then (
					return track(len track);
				)
				else if(b.getIndexInTrack() = 1) then (
					return track(len track);
				)	
				else if(t.getCurrentBlock().isStation()) then ( -- is station
					return track(b.getIndexInTrack()-2);
				)
				else ( 
					return track(b.getIndexInTrack()-1);	
				)
			)
	);
		
	/**
	* Get next block index
	* @param currentIndex nat1
	* @param drection bool
	*
	*	return nextIndex
	*/
	pure public getNextBlockIndex : nat1 * bool ==> nat1 
	getNextBlockIndex(currentIndex,direction) == (
	
			if(direction) then (
				if(track(currentIndex).isStation() and  currentIndex >= (len track-1)) then (
					return 1;
				)
				else if(currentIndex >= len track ) then (
					return 1;
				)
				else if(track(currentIndex).isStation()) then ( -- is station
					return currentIndex+2;
				)
				else ( 
					return currentIndex+1;	
				)
			)
			else (
				if(track(currentIndex).isStation() and currentIndex = 2) then (
					return len track;
				)
				else if(currentIndex = 1) then (
					return len track;
				)	
				else if(track(currentIndex).isStation()) then ( -- is station
					return currentIndex-2;
				)
				else ( 
					return currentIndex-1;	
				)
			)
	);
		
 /**
	* Get previous block 
	* @param t train
	*/
	pure public getPreviousBlock : Train ==> Block 
	getPreviousBlock(t) == (
			dcl b : Block := t.getCurrentBlock();
	
			if(not t.getDirection()) then (
				if(b.isStation() and  b.getIndexInTrack() >= (len track-1)) then (
					return track(1);
				)
				else if(b.getIndexInTrack() >= len track ) then (
					return track(1);
				)
				else if(t.getCurrentBlock().isStation()) then ( -- is station
					return track(b.getIndexInTrack()+2);
				)
				else ( 
					return track(b.getIndexInTrack()+1);	
				)
			)
			else (
				if(b.isStation() and  b.getIndexInTrack() = 2) then (
					return track(len track);
				)
				else if(b.getIndexInTrack() = 1) then (
					return track(len track);
				)	
				else if(t.getCurrentBlock().isStation()) then ( -- is station
					return track(b.getIndexInTrack()-2);
				)
				else ( 
					return track(b.getIndexInTrack()-1);	
				)
			)
	);
		
	/**
	* Get previous block index
	* @param currentIndex nat1
	* @param drection bool
	*
	*	return previousIndex
	*/
	pure public getPreviousBlockIndex : nat1 * bool ==> nat1 
	getPreviousBlockIndex(currentIndex,direction) == (
			if(not direction) then (
				if(track(currentIndex).isStation() and  currentIndex >= (len track-1)) then (
					return 1;
				)
				else if(currentIndex >= len track ) then (
					return 1;
				)
				else if(track(currentIndex).isStation()) then ( -- is station
					return currentIndex+2;
				)
				else ( 
					return currentIndex+1;	
				)
			)
			else (
				if(track(currentIndex).isStation() and currentIndex = 2) then (
					return len track;
				)
				else if(currentIndex = 1) then (
					return len track;
				)	
				else if(track(currentIndex).isStation()) then ( -- is station
					return currentIndex-2;
				)
				else ( 
					return currentIndex-1;	
				)
			)
	);

/**
 * Check if there are two trains in the same block
 * @params t seq of trains
 * @return true if there are two trains in the same block
 */	
pure private twoTrainsInSameBlock: seq of Train ==> bool
twoTrainsInSameBlock(t) ==
	return exists i, j in set inds t &i <> j and t(i).getCurrentBlock() = t(j).getCurrentBlock();

/**
 * Check if there are two blocks with the same index in track
 * @params b seq of blocks
 * @return true if there are two blocks with the same index in track
 */		
pure private hasDuplicatesIndexInTrack: seq of Block ==> bool
hasDuplicatesIndexInTrack(b) ==
	return exists i, j in set inds b &i <> j and b(i).getIndexInTrack() = b(j).getIndexInTrack();
	
	/**
 * Check if there are all blocks that have a train, have the hasTrain set at true
 * @params b seq of trains
 * @return the result
 */		
pure private currentBlockOnTrains: seq of Train ==> bool
currentBlockOnTrains(t) ==
		return forall i in set inds t &t(i).getCurrentBlock().getHasTrain()= true;
	
functions
/**
 * Check if there are duplicate objects
 * @params s seq of objects
 * @return true if there are duplicate objects
 */
hasDuplicates[@T]: seq of @T+> bool
hasDuplicates(s) ==
	exists i, j in set inds s &i <> j and s(i) = s(j);
	
traces
-- TODO Define Combinatorial Test Traces here
end Track