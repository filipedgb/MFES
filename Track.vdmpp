class Track
/*
  Defines a sequence of blocks.
  FEUP, MFES, 2015/16.
*/
types
	
	
values
-- TODO Define values here
instance variables
	-- track is circular	
	private track: [seq of Block] := [];

operations
	/**
	 * Track constructor without blocks
	 *
	 * @param blocks 
	 * @return Train with auto-incremental id and the moving state set to the param value
	 */
	public Track : () ==> Track
	Track() == (
		return self
	);
	
	/**
	* Getter for the track
	* @return track
	*/
	public getTrack : () ==> seq of Block
	getTrack() == (
		return self.track
	);
	
	/**
	* Adds block to the track
	* @param block block to add
	*/
	public addBlockToTrack : Block ==> ()
	addBlockToTrack(block) == (
		track := track ^ [block];
		block.setIndexInTrack(len track)
	);
	
	
	
	public changeSemaphoresToRed : Train ==> ()
	changeSemaphoresToRed(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl index: nat := 0;
		
		if t.getDirection() then ( -- clockwise
			while	track(b.getIndexInTrack()+index).isStation() = false do (
				track(b.getIndexInTrack()+index).setSemaphore2(<RED>);
				index := index+1;
			)
		) 
		else ( -- counterclockwise
			while	track(b.getIndexInTrack()-index).isStation() = false do (
				track(b.getIndexInTrack()-index).setSemaphore1(<RED>);
				index := index+1;
			)
		)
	
	);
		
	public changeSemaphoresToGreen: Train ==> ()
	changeSemaphoresToGreen(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl index: nat := 0;
		
		if t.getDirection() then ( -- clockwise
			while	track(b.getIndexInTrack()+index).isStation() = false do (
				track(b.getIndexInTrack()+index).setSemaphore2(<GREEN>);
				index := index+1;
			)
		) 
		else ( -- counterclockwise
			while	track(b.getIndexInTrack()-index).isStation() = false do (
				track(b.getIndexInTrack()-index).setSemaphore1(<GREEN>);
				index := index+1;
			)
		)
	
	);
	
	public askToLeaveStation: Train ==> bool
	askToLeaveStation(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl index: nat1 := 2;
	
		if t.getDirection() then ( -- clockwise
			while	track(b.getIndexInTrack()+index).isStation() = false do (
				if(track(b.getIndexInTrack()+index).getHasTrain()) then return false;
				index := index+1;
			);
			
			return true;
		) 
		else ( -- counterclockwise
			while	track(b.getIndexInTrack()-index).isStation() = false do (
				if(track(b.getIndexInTrack()-index).getHasTrain()) then return false;
				index := index+1;

			);
			
			return true;
		)
	
	);
		
	
		
	
	/**
	* Moves train on block according to the direction and position of the train
	* @param t train
	*/
	-- falta ver os semaforos [n sei se vai ser para ver aqui]
	public moveTrain : Train ==> bool
	moveTrain(t) == (
		dcl b: Block := t.getCurrentBlock();
		dcl nb: Block := getNextBlock(t);
	
		if(t.getDirection()) then ( -- semaphores 1
			if(nb.getSemaphore1() = <RED>) then (
				return false
			)
			else (
				t.setCurrentBlock(nb);
				b.setHasTrain(false);
				
				if(b.isStation()) then (
					changeSemaphoresToRed(t);
				);
				
				return true
			)
		)
		else ( --semaphores 2
			if(nb.getSemaphore2() = <RED>) then (
				return false
			)
			else (
				t.setCurrentBlock(nb);
				b.setHasTrain(false);
				
				if(b.isStation()) then (
					changeSemaphoresToRed(t);
				);
				
				return true
			)
		)

	);
	
	/**
	* Get next block 
	* @param t train
	*/
	
	public getNextBlock : Train ==> Block 
	getNextBlock(t) == (
			dcl b : Block := t.getCurrentBlock();
	
			if(t.getDirection()) then (
				if(b.isStation() and  b.getIndexInTrack() >= (len track-1)) then (
					return track(1);
				)
				else if(b.getIndexInTrack() >= len track ) then (
					return track(1);
				)
				else if(t.getCurrentBlock().isStation()) then ( -- is station
					return track(b.getIndexInTrack()+2);
				)
				else ( 
					return track(b.getIndexInTrack()+1);	
				)
			)
			else (
				if(b.isStation() and  b.getIndexInTrack() = 2) then (
					return track(len track);
				)
				else if(b.getIndexInTrack() = 1) then (
					return track(len track);
				)	
				else if(t.getCurrentBlock().isStation()) then ( -- is station
					return track(b.getIndexInTrack()-2);
				)
				else ( 
					return track(b.getIndexInTrack()-1);	
				)
			)
		
	);
		
	
	

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Track