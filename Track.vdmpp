class Track
/*
  Defines a sequence of blocks.
  FEUP, MFES, 2015/16.
*/
types
	
	
values
-- TODO Define values here
instance variables
	-- track is circular	
	private track: [seq of Block] := [];

operations
	/**
	 * Track constructor without blocks
	 *
	 * @param blocks 
	 * @return Train with auto-incremental id and the moving state set to the param value
	 */
	public Track : () ==> Track
	Track() == (
		return self
	);
	
	/**
	* Getter for the track
	* @return track
	*/
	public getTrack : () ==> seq of Block
	getTrack() == (
		return self.track
	);
	
	/**
	* Adds block to the track
	* @param block block to add
	*/
	public addBlockToTrack : Block ==> ()
	addBlockToTrack(block) == (
		track := track ^ [block];
		block.setIndexInTrack(len track)
	);
	
	/**
	* Moves train on block according to the direction and position of the train
	* @param t train
	*/
	-- falta ver os semaforos [n sei se vai ser para ver aqui]
	public moveTrain : Train ==> ()
	moveTrain(t) == (
		dcl b: Block := t.getCurrentBlock();
		if t.getDirection() then ( -- forward
			if b.getIndexInTrack() < len track then (
				t.setCurrentBlock(track(b.getIndexInTrack()+1));
				track(b.getIndexInTrack()+1).setHasTrain(true)
			) else ( -- was on last element of track, goes back to the beginning
				t.setCurrentBlock(track(1));
				track(1).setHasTrain(true)
			)
		)
		else ( -- backward
			if b.getIndexInTrack() = 1 then ( -- was on first element, goes to the end 
				t.setCurrentBlock(track(len track));
				track(len track).setHasTrain(true)
			) else (
				t.setCurrentBlock(track(b.getIndexInTrack()-1));
				track(b.getIndexInTrack()-1).setHasTrain(true)
			)
		); 
		b.setHasTrain(false)
	);
	

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Track