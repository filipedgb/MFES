/*
 * Defines a piece of track.
 * FEUP, MFES, 2015/16.
 */
class Block
types
	public Semaphore = <RED>|<YELLOW>|<GREEN>;
	public String = seq of char;
values
-- TODO Define values here
instance variables
	private semaphores: map String to Semaphore := {"cw"	|-> <GREEN> , "ccw" |-> <GREEN>} ;
	private hasTrain: bool := false;
	private isPartOfStation: bool := false;
	private indexInTrack: nat1 := 1;
operations
	
	/**
	 * Block constructor.
	 *
	 * @param semaphoreStateIn1 - the state of the semaphore1
	 * @param semaphoreStateIn2 - the state of the semaphore2
	 *
	 * @return Train with auto-incremental id and the moving state set to the param value
	 */
		public Block : Semaphore * Semaphore ==> Block
		Block(semaphoreStateIn1,semaphoreStateIn2) == (
			semaphores("cw") := semaphoreStateIn1;
			semaphores("ccw") := semaphoreStateIn2;
			return self
		);
		
/**
	 * Setter for the semaphore 1 (clockwise/forward direction) state.
	 *
	 */
	public setSemaphore1 : Semaphore ==> ()
	setSemaphore1(stateIn) == (
			semaphores("cw") := stateIn;
	) post semaphores("cw") = stateIn;
		
	/**
	 * Setter for the semaphore 2 (counter-clockwise/backward direction) state.
	 *
	 */
	public setSemaphore2 : Semaphore ==> ()
	setSemaphore2(stateIn) == (
			semaphores("ccw") := stateIn;
	) post semaphores("ccw") = stateIn; 
	
	
	/**
	 * Getter for the semaphore 1 (clockwise/forward direction).
	 *
	 * @return the semaphore 1 state
	 */
	pure public getSemaphore1 : () ==> Semaphore
	getSemaphore1() == return self.semaphores("cw");
		
	/**
	 * Getter for the semaphore 2  (counter-clockwise/backward direction).
	 *
	 * @return semaphore 2 state
	 */
	pure public getSemaphore2 : () ==> Semaphore
	getSemaphore2() == return self.semaphores("ccw");
	
	/**
	 * Getter for the index in track
	 *
	 * @return index
	 */
	pure public getIndexInTrack : () ==> nat1
	getIndexInTrack() == return self.indexInTrack;
	
	/**
	 * Setter for the index in track
	 *
	 * @param i
	 */
	public setIndexInTrack : nat1 ==> ()
	setIndexInTrack(i) == (
		indexInTrack := i;
	) post indexInTrack = i;
	
	/**
	 * Check if block has train
	 *
	 * @return hasTrain
	 */
	pure public getHasTrain : () ==> bool
	getHasTrain() == return self.hasTrain;
		
	/**
	 * Setter for the hasTrain
	 *
	 * @param h
	 */
	public setHasTrain : bool ==> ()
	setHasTrain(h) == (
		hasTrain := h
	) post hasTrain = h;
	
 /**
	 * Setter for being part of station
	 *
	 * @param s
	 */
	public setStation : bool ==> ()
	setStation(s) == (
		isPartOfStation := s
	) post isPartOfStation = s;
	
 /**
	 * Check if block is part of a station
	 *
	 * @return isPartOfStation
	 */
	pure public isStation : () ==> bool
	isStation() == return self.isPartOfStation;
	

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Block